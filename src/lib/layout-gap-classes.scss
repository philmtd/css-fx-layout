@use "sass:list";
@use "sass:math";

@import "mixins";

/// Includes selectors for classes which can be used to add a specific gap to elements in a flex container
///
/// @param {number} $value
///   Will start generating selectors for $value $gapUnits
/// @param {string} $gapUnits
///   Will generate selectors for the units passed in $gapUnits, e.g. px em rem
/// @param {string} $name
///   Will generate selectors for a specific media size, e.g. xs, sm, md, ...
@mixin layout-gap-class($value, $gapUnits, $name: false) {
	@each $unit in $gapUnits {
		*.fx-gap--#{$value}#{$unit}#{if($name, '--' + $name, '')} {
			gap: #{$value}#{$unit};
		}
	}
};

/// Includes selectors for classes which can be used to add a gap to elements in a flex container
///
/// @param {number} $from
///   Will start generating selectors from $from $gapUnits
/// @param {number} $to
///   Will generate selectors until including $to $gapUnits
/// @param {string} $increment
///   Will generate selectors in increments of $increment
/// @param {string} $gapUnits
///   Will generate selectors for the units passed in $gapUnits, e.g. px em rem
/// @param {bool} $includeSelectorsForMediaSizes
///	  Will generate additional selectors for flex layout media sizes
@mixin layout-gap-classes($from: 1, $to: 24, $increment: 1, $gapUnits: px em rem, $includeSelectorsForMediaSizes: true) {
    @if $from % $increment != 0 or $to % $increment != 0 {
        @error "$from (#{$from}) and $to (#{$to}) must be dividable by $increment (#{$increment}).";
    }
	@for $i from math.div($from, $increment) through math.div($to, $increment) {
		@include layout-gap-class($i * $increment, $gapUnits)
	}
	@if $includeSelectorsForMediaSizes {
		@each $name, $_ in $flex-layout-media-queries {
			@include flex-layout-media($name) {
				@for $i from math.div($from, $increment) through math.div($to, $increment) {
					@include layout-gap-class($i * $increment, $gapUnits, $name)
				}
			}
		}
	}
}

/// Includes selectors for classes based on a list of values which can be used to add a gap to elements in a flex container
///
/// @param {number} $values
///  Will generate selectors for every value in $values list
/// @param {string} $gapUnits
///   Will generate selectors for the units passed in $gapUnits, e.g. px em rem
/// @param {bool} $includeSelectorsForMediaSizes
///	  Will generate additional selectors for flex layout media sizes
@mixin layout-gap-classes-from-list($values: 4 8 16, $gapUnits: px em rem, $includeSelectorsForMediaSizes: true) {
	@each $value in $values {
		@include layout-gap-class($value, $gapUnits)
	}
	@if $includeSelectorsForMediaSizes {
		@each $name, $_ in $flex-layout-media-queries {
			@include flex-layout-media($name) {
				@each $value in $values {
					@include layout-gap-class($value, $gapUnits, $name)
				}
			}
		}
	}
}
