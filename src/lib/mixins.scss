// Flex

@mixin flex-properties {
  flex: 1 1 0;
}

@mixin flex-grow-properties {
  flex: 1 1 auto;
}

// Layout

@mixin flex-row-properties {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
}

@mixin flex-column-properties {
  display: flex;
  flex-direction: column;
  flex-wrap: nowrap;
}

@mixin row-reverse-properties {
  flex-direction: row-reverse;
}

@mixin column-reverse-properties {
  flex-direction: column-reverse;
}

@mixin wrap-properties {
  flex-wrap: wrap;

}

// Media

$media-phone: "(max-width: 479px)";
$media-no-phone: "(min-width: 480px)";
$media-tablet: "(min-width: 480px) and (max-width: 839px)";
$media-desktop: "(min-width: 840px)";
$media-no-desktop: "(max-width: 839px)";

@mixin phone {
  @media #{$media-phone} {
    @content;
  }
}

@mixin no-phone {
  @media #{$media-no-phone} {
    @content;
  }
}

@mixin tablet {
  @media #{$media-tablet} {
    @content;
  }
}

@mixin desktop {
  @media #{$media-desktop} {
    @content;
  }
}

@mixin no-desktop {
  @media #{$media-no-desktop} {
    @content;
  }
}

// Gap

/// Includes selectors for classes which can be used to add a gap to elements in a flex container
///
/// @param {number} $from
///   Will start generating selectors from $from $gapUnits
/// @param {number} $to
///   Will generate selectors until including $to $gapUnits
/// @param {string} $gapUnits
///   Will generate selectors for the units passed in $gapUnits, e.g. px em rem
@mixin layout-gap-classes($from: 1, $to: 24, $gapUnits: px em rem) {
  @for $i from $from through $to {
    @each $unit in $gapUnits {
      *.fx-gap--#{$i}#{$unit} {
        gap: #{$i}#{$unit};
      }
    }
  }
}

/// Includes selectors for attributes which can be used to add a gap to elements in a flex container
///
/// @param {number} $from
///   Will start generating selectors from $from $gapUnits
/// @param {number} $to
///   Will generate selectors until including $to $gapUnits
/// @param {string} $gapUnits
///   Will generate selectors for the units passed in $gapUnits, e.g. px em rem
@mixin layout-gap-attributes($from: 1, $to: 24, $gapUnits: px em rem) {
  @for $i from $from through $to {
    @each $unit in $gapUnits {
      *[data-layout-gap="#{$i}#{$unit}"] {
        gap: #{$i}#{$unit};
      }
    }
  }
}
